【3.1】为用户WANG定义一个学生-课程模式 S-T
 CREATE SCHEMA "S-T" AUTHORIZATION WANG;

【3.3】 为用户ZHANG创建一个模式TEST，并且在其中定义一个表TAB1。
 CREATE SCHEMA TEST AUTHORIZATION ZHANG  
 CREATS TABLE TAB1(COL1 SMALLINT,
                                   COL2 INT,
                                   COL3 CHAR(20),
                                   COL4 NUMERIC(10,3),
                                   COL5 DECIMAL(5,2),
                                   );

【3.5】建立一个“学生”表Student。
 CREATE TABLE Student
    (Sno CHAR(9) PRIMARY KEY,
    Sname CHAR(20) UNIQUE,
    Ssex CHAR(2),
    Sage SMALLINT,
    Sdept CHAR(20)
    );

【3.7】建立一个学生选课表SC
 CREATE TABLE SC
  (Sno CHAR(9),
  Cno CHAR(4),
  Grade SMALLINT,
  PRIMARY KEY(Sno,Cno),
  FOREIGN KEY(Sno)REFERENCES Student(Sno),
  FOREIGN KEY(Cno)REFERENCES Coures(Cno)
  );

【3.9】将年龄的数据类型由字符型（假设原来的数据类型是字符型）改为整数。
 ALTER TABLE Student ALTER COLUMN Sage INT;

【3.11】删除Student表。
 DROP TABLE Student CASCADE;

【3.13】为学生-课程数据库中的Student、Course和SC三个表建立索引。其中Student表按照学号升序建唯一索引，Course表按照课程号升序建立唯一索引，
SC表按照学号升序和课程号降序建唯一索引。
 CREATE UNIQUE INDEX Stusno ON Student (Sno);
 CREATE UNIQUE INDEX Cnocno ON coured (Cno);
 CREATE UNIQUE INDEX SCno ON SC (Sno ASC,Cno DESC);

【3.15】删除Student表中的Stusname 索引。
  DROP INDEX Stusname;

【3.17】查询全体学生的姓名、学号、所在系。
  SELECT Sname,Sno,Sdept
  FROM Student;
	
【3.19】查询全体学生的姓名及其出生年份。
 SELECT Sname,2014-Sage 
 FROM Student;
 
【3.21】查询选修了课程的学生学号。
 SECELT Sno
 FROM SC;
 该查询结果包含了许多重复的行。如想去掉结果表中的重复行，必须指定DISTINCT。
  SECELT DISTINCT Sno
  FROM SC;

【3.23】查询所有年龄在20岁以下的学生姓名及其年龄。
 SELECT Sname,Sage
 FROM Student 
 WHERE Sage<20;

【3.25】查询年龄在20~23岁（包括20岁和23岁）之间的学生姓名、系别和年龄。
 SELECT Sname,Sdept,Sage
 FROM Student 
 WHERE Sage BETWEEN 20 AND 23;

【3.27】查询计算机科学系（CS）、数学系（MA）、和信息系（IS）学生的姓名和性别。
 SELECT Sname,Sdept,Sage
 FROM Student 
 WHERE Sage NOT BETWEEN 20 AND 23;

【3.29】
 查询学号为201215121的学生的详细情况。
 SECELT *
 FROM Student
 WHERE Sno LIKE '201215121';
等价于
 SELECT *
 FROM Student
 WHERE Sno='201215121';

【3.31】查询姓“欧阳”且全名为三个汉字的学生的姓名。
 SELECT Sname
 FROM Student 
 WHERE Sname LIKE '欧阳_';
 
【3.33】查询所有不姓刘的学生的姓名、学号和性别。
 SELECT Sname,Sno,Ssex 
 FROM Student
 WHERE Sname NOT LIKE '刘%';

【3.35】查询以“DB_”开头，且倒数第三个字符以i的课程的详细情况。
 SECELT *
 FROM Course
 WHERE Cname LIKE 'DB\_%i_ _'ESCAPE'\';

【3.37】查所有有成绩的学生学号和课程号。
 SELECT Sno,Cno
 FROM SC
 WHERE Grade IS NOT NULL;

【3.39】查询选修了3号课程的学生的学号及其成绩，查询结果按分数的降序排列。 
 SELECT Sno,Grade
 FROM SC
 WHERE Cno='3'
 ORDER BY Grade DESC;

【3.41】查询学生总人数。
 SECELT COUNT(*)
 FROM Student;

【3.43】计算选修了1号课程的学生平均成绩。
 SELECT AVG(Grade)
 FROM SC
 WHERE Cno='1';

【3.45】查询学生201212012选修课程的总学分数。
 SELECT SUM(Ccredit)
 FROM SC,Course
 WHERE Sno='201215021'AND SC.Cno=Course.Cno;

【3.47】查询选修了三门以上课程的学生学号。
 SELECT Sno
 FROM SC
 GROUP BY Sno
 HAVING COUNT(*)>3;

【3.49】查询每个学生及其选修课程的情况。
 SELECT Student.*,SC.*
 FROM Student,SC
 WHERE Student.Sno=SC.Sno;

【3.51】查询选修2号课程且成绩在90分以上的所有学生的学号和姓名。
 SELECT Student.Sno,Sname
 FROM Student,SC
 WHERE Student.Sno=SC.sno AND
           SC.Cno='2' AND SC.Grade>90;

【3.53】
 SECELT Student.Sno,Sname,Ssex,Sage,Sdept,Cno,Grade
 FROM Student LEFT OUTER JOIN SC ON (Student.Sno=SC.Sno);

【3.55】查询与“刘晨”在同一个系学习的学生。
 先分步来完成此查询，然后再构造嵌套查询。
 1.确定“刘晨”所在系名。
 SELECT Sdept 
 FROM Student
 WHERE Sname ='刘晨'；
结果为CS。
 2.查找所有在CS系学习的学生。
 SELECT Sno,Sname,Sdept
 FROM Student 
 WHERE Sdept='CS';
将第一步和查询嵌入第二步查询的条件中，构造嵌套查询如下：
 SELECT Sdept 
 FROM Student
 WHERE Sdept IN
 (SELECT Sdept
  FROM Student 
  WHERE Sname ='刘晨');

【3.57】找出每个学生超过他自己选修课程中平均成绩的课程号。
 SELECT Sno,Cno
 FROM SC x
 WHERE Grade >=(SELECT AVG(Grade)
                               FROM SC y
                               WHERE y.Sno=x.Sno);

【3.59】查询非计算机科学系中比计算机科学系所有学生年龄都笑的学生姓名及其年龄。
 SELECT Sname,Sage 
 FROM Student 
 WHERE Sage < ALL
                (SELECT Sage 
                 FROM Student 
                 WHERE Sdept='CS')
AND Sdept <>'CS';
本查询同样也可以用聚集函数实现。SQL语句如下：
 SELECT Sname,Sage
 FROM Student 
 WHERE Sage <
          (SELECT MIN(Sage)
            FROM Student 
            WHERE Sdept='CS');

【3.61】查询没有选修1号课程的学生姓名。
 SELECT Sname
 FROM Student 
 WHERE NOT EXISTS
              (SELECT * 
               FROM SC
               WHERE Sno=Student.Sno AND Cno='1');

【3.63】查询至少选修了学生201215122选修的全部课程的学生号码。
 SELECT DISTINC Sno
 FROM SC SCX 
 WHERE NOT EXISTS
          (SELECT *
           FROM SC SCY
           WHERE SCY.Sno='201215122'AND 
                      NOT EXISTS 
                      (SELECT *
                      FROM SC SCZ
                      WHERE SCZ.Sno=SCX.Sno AND
                                   SCZ.Cno=SCY.Cno));

【3.65】查询选修了课程1或者选修了课程2的学生
 SELECT Sno
 FROM SC 
 WHERE Cno='1'
 UNION 
 SELECT Sno
 FROM SC
 WHERE Cno='2';

【3.67】查询既选修了课程1又选修了课程2的学生。
 SELECT Sno
 FROM SC 
 WHERE Cno='1' AND Sno IN
                                   (SELECT Sno
                                    FROM SC
                                    WHERE Cno='2');

【3.69】将一个新学生元组（学号：201215128，姓名：陈冬，性别：男，所在系：IS，年龄：18岁）插入到Student表中。
 INSERT 
 INTO Student(Sno,Sname,Ssex,Sdept,Sage)
 VALUES('201215128','陈冬男','IS',18);

【3.71】插入一条选课记录（'201215128','1')
 INSERT
 INTO SC(Sno,Cno)
 VALUES ('201215128','1');

【3.73】将学生201215121的年龄改为22岁。
 UPDATE Student
 SET Sage=22
 WHERE Sno='201215121';

【3.75】将计算机科学系全体学生的成绩置零。
 UPDATE SC
 SET Grade=0
 WHERE Sno IN
           (SELECT Sno
            FROM Student
            WHERE Sdept='CS');

【3.77】删除所有的学生选课记录
 DELETE
 FROM SC

【3.79】向SC表中插入一个元组，学生号是“201215126”，课程号是“1”，成绩为空。
 INSERT INTO SC(Sno,Cno)
         VALUES('201215126','1');

【3.81】从Student表中找出漏填了数据的学生信息。
 SELECT *
 FROM Student
 WHERE Sname IS NULL OR Ssex IS NULL OR Sage IS NULL OR Sdept IS NULL;

【3.83】选出选修1号课程的不及格的学生以及缺考的学生。
 SELECT Sno
 FROM SC
 WHERE Cno='1' AND (Grade <60 OR Grade IS NULL);

【3.85】建立信息系学生的试图，并要求进行修改和插入操作时仍需保证该视图只有信息系的学生。
 CREATE VIEW IS_Student
 AS
 SELECT Sno,Sname,Sage
 FROM Student 
 WHERE Sdept='IS'
 WITH CHECK OPTION;

【3.87】建立信息系选修了1号课程且成绩在90分以上的学生的视图。
 CREATE VIEW IS_S2
 AS SELECT Sno,Sname,Grade
 FROM IS_S1
 WHERE Grade>=90;

【3.89】将学生的学号及平均成绩定义为一个视图
 CREATE VIEW S_G(Sno,Gavg)
 AS 
 SELECT Sno,AVG(Grade)
 FROM SC
 GROUP BY Sno;

【3.91】删除试图BT_S 和视图IS_S1；
 DROP VIEW BT_S;
 DROP VIEW IS_S1 CASCADE;

【3.93】查询选修了1号课程的信息系学生。
 SELECT IS_Student.Sno,Sname
 FROM IS_Student,SC
 WHERE IS_Student.Sno=SC.Sno AND SC.Cno='1';









 




































































































                                     